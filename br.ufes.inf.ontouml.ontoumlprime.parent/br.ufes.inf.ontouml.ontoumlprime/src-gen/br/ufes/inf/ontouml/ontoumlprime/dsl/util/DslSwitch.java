/**
 * generated by Xtext 2.20.0
 */
package br.ufes.inf.ontouml.ontoumlprime.dsl.util;

import br.ufes.inf.ontouml.ontoumlprime.dsl.BinaryFormalRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.BinaryMaterialRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Category;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Characterization;
import br.ufes.inf.ontouml.ontoumlprime.dsl.CollectiveUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ComplexDataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ComponentOfRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DataTypeAttribute;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DslPackage;
import br.ufes.inf.ontouml.ontoumlprime.dsl.EndurantUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Enumeration;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ExternallyDependentUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.GeneralizationSet;
import br.ufes.inf.ontouml.ontoumlprime.dsl.IntrinsicMomentUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Kind;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Mediation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.MembershipRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.MeronymicRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Mixin;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ModeUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Model;
import br.ufes.inf.ontouml.ontoumlprime.dsl.PackageableElement;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Phase;
import br.ufes.inf.ontouml.ontoumlprime.dsl.PrimitiveDataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.PrimitiveDataTypeType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.QualityUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.QuantityUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.RelatorUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Role;
import br.ufes.inf.ontouml.ontoumlprime.dsl.RoleMixin;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubCollectionRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubKind;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubQuantityRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubstantialUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Universal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.nAryFormalRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.nAryMaterialRelation;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see br.ufes.inf.ontouml.ontoumlprime.dsl.DslPackage
 * @generated
 */
public class DslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PACKAGEABLE_ELEMENT:
      {
        PackageableElement packageableElement = (PackageableElement)theEObject;
        T result = casePackageableElement(packageableElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ENDURANT_UNIVERSAL:
      {
        EndurantUniversal endurantUniversal = (EndurantUniversal)theEObject;
        T result = caseEndurantUniversal(endurantUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.UNIVERSAL:
      {
        Universal universal = (Universal)theEObject;
        T result = caseUniversal(universal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INTRINSIC_MOMENT_UNIVERSAL:
      {
        IntrinsicMomentUniversal intrinsicMomentUniversal = (IntrinsicMomentUniversal)theEObject;
        T result = caseIntrinsicMomentUniversal(intrinsicMomentUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXTERNALLY_DEPENDENT_UNIVERSAL:
      {
        ExternallyDependentUniversal externallyDependentUniversal = (ExternallyDependentUniversal)theEObject;
        T result = caseExternallyDependentUniversal(externallyDependentUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PACKAGE:
      {
        br.ufes.inf.ontouml.ontoumlprime.dsl.Package package_ = (br.ufes.inf.ontouml.ontoumlprime.dsl.Package)theEObject;
        T result = casePackage(package_);
        if (result == null) result = casePackageableElement(package_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GENERALIZATION_SET:
      {
        GeneralizationSet generalizationSet = (GeneralizationSet)theEObject;
        T result = caseGeneralizationSet(generalizationSet);
        if (result == null) result = casePackageableElement(generalizationSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PRIMITIVE_DATA_TYPE:
      {
        PrimitiveDataType primitiveDataType = (PrimitiveDataType)theEObject;
        T result = casePrimitiveDataType(primitiveDataType);
        if (result == null) result = casePackageableElement(primitiveDataType);
        if (result == null) result = caseDataType(primitiveDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPLEX_DATA_TYPE:
      {
        ComplexDataType complexDataType = (ComplexDataType)theEObject;
        T result = caseComplexDataType(complexDataType);
        if (result == null) result = casePackageableElement(complexDataType);
        if (result == null) result = caseDataType(complexDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ENUMERATION:
      {
        Enumeration enumeration = (Enumeration)theEObject;
        T result = caseEnumeration(enumeration);
        if (result == null) result = casePackageableElement(enumeration);
        if (result == null) result = caseDataType(enumeration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SUBSTANTIAL_UNIVERSAL:
      {
        SubstantialUniversal substantialUniversal = (SubstantialUniversal)theEObject;
        T result = caseSubstantialUniversal(substantialUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MERONYMIC_RELATION:
      {
        MeronymicRelation meronymicRelation = (MeronymicRelation)theEObject;
        T result = caseMeronymicRelation(meronymicRelation);
        if (result == null) result = casePackageableElement(meronymicRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPONENT_OF_RELATION:
      {
        ComponentOfRelation componentOfRelation = (ComponentOfRelation)theEObject;
        T result = caseComponentOfRelation(componentOfRelation);
        if (result == null) result = caseMeronymicRelation(componentOfRelation);
        if (result == null) result = casePackageableElement(componentOfRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MEMBERSHIP_RELATION:
      {
        MembershipRelation membershipRelation = (MembershipRelation)theEObject;
        T result = caseMembershipRelation(membershipRelation);
        if (result == null) result = caseMeronymicRelation(membershipRelation);
        if (result == null) result = casePackageableElement(membershipRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SUB_COLLECTION_RELATION:
      {
        SubCollectionRelation subCollectionRelation = (SubCollectionRelation)theEObject;
        T result = caseSubCollectionRelation(subCollectionRelation);
        if (result == null) result = caseMeronymicRelation(subCollectionRelation);
        if (result == null) result = casePackageableElement(subCollectionRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SUB_QUANTITY_RELATION:
      {
        SubQuantityRelation subQuantityRelation = (SubQuantityRelation)theEObject;
        T result = caseSubQuantityRelation(subQuantityRelation);
        if (result == null) result = caseMeronymicRelation(subQuantityRelation);
        if (result == null) result = casePackageableElement(subQuantityRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.KIND:
      {
        Kind kind = (Kind)theEObject;
        T result = caseKind(kind);
        if (result == null) result = casePackageableElement(kind);
        if (result == null) result = caseEndurantUniversal(kind);
        if (result == null) result = caseUniversal(kind);
        if (result == null) result = caseSubstantialUniversal(kind);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.QUANTITY_UNIVERSAL:
      {
        QuantityUniversal quantityUniversal = (QuantityUniversal)theEObject;
        T result = caseQuantityUniversal(quantityUniversal);
        if (result == null) result = casePackageableElement(quantityUniversal);
        if (result == null) result = caseEndurantUniversal(quantityUniversal);
        if (result == null) result = caseUniversal(quantityUniversal);
        if (result == null) result = caseSubstantialUniversal(quantityUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COLLECTIVE_UNIVERSAL:
      {
        CollectiveUniversal collectiveUniversal = (CollectiveUniversal)theEObject;
        T result = caseCollectiveUniversal(collectiveUniversal);
        if (result == null) result = casePackageableElement(collectiveUniversal);
        if (result == null) result = caseEndurantUniversal(collectiveUniversal);
        if (result == null) result = caseUniversal(collectiveUniversal);
        if (result == null) result = caseSubstantialUniversal(collectiveUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SUB_KIND:
      {
        SubKind subKind = (SubKind)theEObject;
        T result = caseSubKind(subKind);
        if (result == null) result = casePackageableElement(subKind);
        if (result == null) result = caseEndurantUniversal(subKind);
        if (result == null) result = caseUniversal(subKind);
        if (result == null) result = caseSubstantialUniversal(subKind);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ROLE:
      {
        Role role = (Role)theEObject;
        T result = caseRole(role);
        if (result == null) result = casePackageableElement(role);
        if (result == null) result = caseEndurantUniversal(role);
        if (result == null) result = caseUniversal(role);
        if (result == null) result = caseExternallyDependentUniversal(role);
        if (result == null) result = caseSubstantialUniversal(role);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PHASE:
      {
        Phase phase = (Phase)theEObject;
        T result = casePhase(phase);
        if (result == null) result = casePackageableElement(phase);
        if (result == null) result = caseEndurantUniversal(phase);
        if (result == null) result = caseUniversal(phase);
        if (result == null) result = caseSubstantialUniversal(phase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CATEGORY:
      {
        Category category = (Category)theEObject;
        T result = caseCategory(category);
        if (result == null) result = casePackageableElement(category);
        if (result == null) result = caseUniversal(category);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MIXIN:
      {
        Mixin mixin = (Mixin)theEObject;
        T result = caseMixin(mixin);
        if (result == null) result = casePackageableElement(mixin);
        if (result == null) result = caseUniversal(mixin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ROLE_MIXIN:
      {
        RoleMixin roleMixin = (RoleMixin)theEObject;
        T result = caseRoleMixin(roleMixin);
        if (result == null) result = casePackageableElement(roleMixin);
        if (result == null) result = caseUniversal(roleMixin);
        if (result == null) result = caseExternallyDependentUniversal(roleMixin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RELATOR_UNIVERSAL:
      {
        RelatorUniversal relatorUniversal = (RelatorUniversal)theEObject;
        T result = caseRelatorUniversal(relatorUniversal);
        if (result == null) result = casePackageableElement(relatorUniversal);
        if (result == null) result = caseEndurantUniversal(relatorUniversal);
        if (result == null) result = caseUniversal(relatorUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BINARY_MATERIAL_RELATION:
      {
        BinaryMaterialRelation binaryMaterialRelation = (BinaryMaterialRelation)theEObject;
        T result = caseBinaryMaterialRelation(binaryMaterialRelation);
        if (result == null) result = casePackageableElement(binaryMaterialRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BINARY_FORMAL_RELATION:
      {
        BinaryFormalRelation binaryFormalRelation = (BinaryFormalRelation)theEObject;
        T result = caseBinaryFormalRelation(binaryFormalRelation);
        if (result == null) result = casePackageableElement(binaryFormalRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MODE_UNIVERSAL:
      {
        ModeUniversal modeUniversal = (ModeUniversal)theEObject;
        T result = caseModeUniversal(modeUniversal);
        if (result == null) result = casePackageableElement(modeUniversal);
        if (result == null) result = caseEndurantUniversal(modeUniversal);
        if (result == null) result = caseUniversal(modeUniversal);
        if (result == null) result = caseIntrinsicMomentUniversal(modeUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.QUALITY_UNIVERSAL:
      {
        QualityUniversal qualityUniversal = (QualityUniversal)theEObject;
        T result = caseQualityUniversal(qualityUniversal);
        if (result == null) result = casePackageableElement(qualityUniversal);
        if (result == null) result = caseEndurantUniversal(qualityUniversal);
        if (result == null) result = caseUniversal(qualityUniversal);
        if (result == null) result = caseIntrinsicMomentUniversal(qualityUniversal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NARY_MATERIAL_RELATION:
      {
        nAryMaterialRelation nAryMaterialRelation = (nAryMaterialRelation)theEObject;
        T result = casenAryMaterialRelation(nAryMaterialRelation);
        if (result == null) result = casePackageableElement(nAryMaterialRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NARY_FORMAL_RELATION:
      {
        nAryFormalRelation nAryFormalRelation = (nAryFormalRelation)theEObject;
        T result = casenAryFormalRelation(nAryFormalRelation);
        if (result == null) result = casePackageableElement(nAryFormalRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHARACTERIZATION:
      {
        Characterization characterization = (Characterization)theEObject;
        T result = caseCharacterization(characterization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MEDIATION:
      {
        Mediation mediation = (Mediation)theEObject;
        T result = caseMediation(mediation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PRIMITIVE_DATA_TYPE_TYPE:
      {
        PrimitiveDataTypeType primitiveDataTypeType = (PrimitiveDataTypeType)theEObject;
        T result = casePrimitiveDataTypeType(primitiveDataTypeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DATA_TYPE_ATTRIBUTE:
      {
        DataTypeAttribute dataTypeAttribute = (DataTypeAttribute)theEObject;
        T result = caseDataTypeAttribute(dataTypeAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Packageable Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Packageable Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageableElement(PackageableElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Endurant Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Endurant Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndurantUniversal(EndurantUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniversal(Universal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Intrinsic Moment Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Intrinsic Moment Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntrinsicMomentUniversal(IntrinsicMomentUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Externally Dependent Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Externally Dependent Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExternallyDependentUniversal(ExternallyDependentUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackage(br.ufes.inf.ontouml.ontoumlprime.dsl.Package object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generalization Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralizationSet(GeneralizationSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveDataType(PrimitiveDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Complex Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Complex Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComplexDataType(ComplexDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumeration(Enumeration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Substantial Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Substantial Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubstantialUniversal(SubstantialUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Meronymic Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Meronymic Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMeronymicRelation(MeronymicRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Of Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Of Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentOfRelation(ComponentOfRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Membership Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Membership Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMembershipRelation(MembershipRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Collection Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Collection Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubCollectionRelation(SubCollectionRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Quantity Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Quantity Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubQuantityRelation(SubQuantityRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Kind</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Kind</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKind(Kind object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quantity Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quantity Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuantityUniversal(QuantityUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collective Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collective Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectiveUniversal(CollectiveUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Kind</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Kind</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubKind(SubKind object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Role</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Role</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRole(Role object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Phase</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Phase</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhase(Phase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Category</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Category</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCategory(Category object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mixin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mixin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMixin(Mixin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Role Mixin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Role Mixin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRoleMixin(RoleMixin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relator Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relator Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelatorUniversal(RelatorUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Material Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Material Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryMaterialRelation(BinaryMaterialRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Formal Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Formal Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryFormalRelation(BinaryFormalRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mode Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mode Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModeUniversal(ModeUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Quality Universal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Quality Universal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualityUniversal(QualityUniversal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>nAry Material Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>nAry Material Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenAryMaterialRelation(nAryMaterialRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>nAry Formal Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>nAry Formal Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenAryFormalRelation(nAryFormalRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Characterization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Characterization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCharacterization(Characterization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mediation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mediation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMediation(Mediation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Data Type Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Data Type Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveDataTypeType(PrimitiveDataTypeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataTypeAttribute(DataTypeAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DslSwitch
