/**
 * generated by Xtext 2.20.0
 */
package br.ufes.inf.ontouml.ontoumlprime.dsl.impl;

import br.ufes.inf.ontouml.ontoumlprime.dsl.DataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DataTypeAttribute;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DslPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Data Type Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.inf.ontouml.ontoumlprime.dsl.impl.DataTypeAttributeImpl#getIsOfType <em>Is Of Type</em>}</li>
 *   <li>{@link br.ufes.inf.ontouml.ontoumlprime.dsl.impl.DataTypeAttributeImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DataTypeAttributeImpl extends MinimalEObjectImpl.Container implements DataTypeAttribute
{
  /**
   * The cached value of the '{@link #getIsOfType() <em>Is Of Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsOfType()
   * @generated
   * @ordered
   */
  protected DataType isOfType;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DataTypeAttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.DATA_TYPE_ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType getIsOfType()
  {
    if (isOfType != null && isOfType.eIsProxy())
    {
      InternalEObject oldIsOfType = (InternalEObject)isOfType;
      isOfType = (DataType)eResolveProxy(oldIsOfType);
      if (isOfType != oldIsOfType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE, oldIsOfType, isOfType));
      }
    }
    return isOfType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType basicGetIsOfType()
  {
    return isOfType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsOfType(DataType newIsOfType)
  {
    DataType oldIsOfType = isOfType;
    isOfType = newIsOfType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE, oldIsOfType, isOfType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.DATA_TYPE_ATTRIBUTE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE:
        if (resolve) return getIsOfType();
        return basicGetIsOfType();
      case DslPackage.DATA_TYPE_ATTRIBUTE__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE:
        setIsOfType((DataType)newValue);
        return;
      case DslPackage.DATA_TYPE_ATTRIBUTE__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE:
        setIsOfType((DataType)null);
        return;
      case DslPackage.DATA_TYPE_ATTRIBUTE__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE:
        return isOfType != null;
      case DslPackage.DATA_TYPE_ATTRIBUTE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DataTypeAttributeImpl
