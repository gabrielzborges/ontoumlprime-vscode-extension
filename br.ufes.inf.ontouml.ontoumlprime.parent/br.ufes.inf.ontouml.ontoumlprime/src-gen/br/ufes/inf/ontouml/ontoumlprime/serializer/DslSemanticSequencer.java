/*
 * generated by Xtext 2.20.0
 */
package br.ufes.inf.ontouml.ontoumlprime.serializer;

import br.ufes.inf.ontouml.ontoumlprime.dsl.BinaryFormalRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.BinaryMaterialRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Category;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Characterization;
import br.ufes.inf.ontouml.ontoumlprime.dsl.CollectiveUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ComplexDataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ComponentOfRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DataTypeAttribute;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DslPackage;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Enumeration;
import br.ufes.inf.ontouml.ontoumlprime.dsl.GeneralizationSet;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Kind;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Mediation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.MembershipRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Mixin;
import br.ufes.inf.ontouml.ontoumlprime.dsl.ModeUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Model;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Phase;
import br.ufes.inf.ontouml.ontoumlprime.dsl.PrimitiveDataType;
import br.ufes.inf.ontouml.ontoumlprime.dsl.QualityUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.QuantityUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.RelatorUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.Role;
import br.ufes.inf.ontouml.ontoumlprime.dsl.RoleMixin;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubCollectionRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubKind;
import br.ufes.inf.ontouml.ontoumlprime.dsl.SubQuantityRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.nAryFormalRelation;
import br.ufes.inf.ontouml.ontoumlprime.dsl.nAryMaterialRelation;
import br.ufes.inf.ontouml.ontoumlprime.services.DslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.BINARY_FORMAL_RELATION:
				sequence_BinaryFormalRelation(context, (BinaryFormalRelation) semanticObject); 
				return; 
			case DslPackage.BINARY_MATERIAL_RELATION:
				sequence_BinaryMaterialRelation(context, (BinaryMaterialRelation) semanticObject); 
				return; 
			case DslPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case DslPackage.CHARACTERIZATION:
				sequence_Characterization(context, (Characterization) semanticObject); 
				return; 
			case DslPackage.COLLECTIVE_UNIVERSAL:
				sequence_CollectiveUniversal(context, (CollectiveUniversal) semanticObject); 
				return; 
			case DslPackage.COMPLEX_DATA_TYPE:
				sequence_ComplexDataType(context, (ComplexDataType) semanticObject); 
				return; 
			case DslPackage.COMPONENT_OF_RELATION:
				sequence_ComponentOfRelation(context, (ComponentOfRelation) semanticObject); 
				return; 
			case DslPackage.DATA_TYPE_ATTRIBUTE:
				sequence_DataTypeAttribute(context, (DataTypeAttribute) semanticObject); 
				return; 
			case DslPackage.ENUMERATION:
				sequence_Enumeration(context, (Enumeration) semanticObject); 
				return; 
			case DslPackage.GENERALIZATION_SET:
				if (rule == grammarAccess.getElementRule()
						|| rule == grammarAccess.getGeneralizationSetRule()) {
					sequence_AnonymousGeneralizationSet_CompleteGeneralizationSet(context, (GeneralizationSet) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnonymousGeneralizationSetRule()) {
					sequence_AnonymousGeneralizationSet(context, (GeneralizationSet) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCompleteGeneralizationSetRule()) {
					sequence_CompleteGeneralizationSet(context, (GeneralizationSet) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMultipleAnonymousGeneralizationSetRule()) {
					sequence_MultipleAnonymousGeneralizationSet(context, (GeneralizationSet) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSingleAnonymousGeneralizationSetRule()) {
					sequence_SingleAnonymousGeneralizationSet(context, (GeneralizationSet) semanticObject); 
					return; 
				}
				else break;
			case DslPackage.KIND:
				sequence_Kind(context, (Kind) semanticObject); 
				return; 
			case DslPackage.MEDIATION:
				sequence_Mediation(context, (Mediation) semanticObject); 
				return; 
			case DslPackage.MEMBERSHIP_RELATION:
				sequence_MembershipRelation(context, (MembershipRelation) semanticObject); 
				return; 
			case DslPackage.MIXIN:
				sequence_Mixin(context, (Mixin) semanticObject); 
				return; 
			case DslPackage.MODE_UNIVERSAL:
				sequence_ModeUniversal(context, (ModeUniversal) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.PACKAGE:
				sequence_Package(context, (br.ufes.inf.ontouml.ontoumlprime.dsl.Package) semanticObject); 
				return; 
			case DslPackage.PHASE:
				sequence_Phase(context, (Phase) semanticObject); 
				return; 
			case DslPackage.PRIMITIVE_DATA_TYPE:
				sequence_PrimitiveDataType(context, (PrimitiveDataType) semanticObject); 
				return; 
			case DslPackage.QUALITY_UNIVERSAL:
				sequence_QualityUniversal(context, (QualityUniversal) semanticObject); 
				return; 
			case DslPackage.QUANTITY_UNIVERSAL:
				sequence_QuantityUniversal(context, (QuantityUniversal) semanticObject); 
				return; 
			case DslPackage.RELATOR_UNIVERSAL:
				sequence_RelatorUniversal(context, (RelatorUniversal) semanticObject); 
				return; 
			case DslPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case DslPackage.ROLE_MIXIN:
				sequence_RoleMixin(context, (RoleMixin) semanticObject); 
				return; 
			case DslPackage.SUB_COLLECTION_RELATION:
				sequence_SubCollectionRelation(context, (SubCollectionRelation) semanticObject); 
				return; 
			case DslPackage.SUB_KIND:
				sequence_SubKind(context, (SubKind) semanticObject); 
				return; 
			case DslPackage.SUB_QUANTITY_RELATION:
				sequence_SubQuantityRelation(context, (SubQuantityRelation) semanticObject); 
				return; 
			case DslPackage.NARY_FORMAL_RELATION:
				sequence_nAryFormalRelation(context, (nAryFormalRelation) semanticObject); 
				return; 
			case DslPackage.NARY_MATERIAL_RELATION:
				sequence_nAryMaterialRelation(context, (nAryMaterialRelation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns GeneralizationSet
	 *     GeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             isCovering?='complete'? 
	 *             name=ID 
	 *             specializedUniversal=[Universal|ID] 
	 *             specializingUniversals+=[Universal|ID] 
	 *             specializingUniversals+=[Universal|ID]*
	 *         ) | 
	 *         (specializingUniversals+=[Universal|ID] specializingUniversals+=[Universal|ID]* specializedUniversal=[Universal|ID])
	 *     )
	 */
	protected void sequence_AnonymousGeneralizationSet_CompleteGeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnonymousGeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (specializingUniversals+=[Universal|ID] specializingUniversals+=[Universal|ID]* specializedUniversal=[Universal|ID])
	 */
	protected void sequence_AnonymousGeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns BinaryFormalRelation
	 *     BinaryFormalRelation returns BinaryFormalRelation
	 *
	 * Constraint:
	 *     (
	 *         source=[Universal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         name=ID 
	 *         target=[Universal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_BinaryFormalRelation(ISerializationContext context, BinaryFormalRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns BinaryMaterialRelation
	 *     BinaryMaterialRelation returns BinaryMaterialRelation
	 *
	 * Constraint:
	 *     (
	 *         source=[ExternallyDependentUniversal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         name=ID 
	 *         derivedFrom=[RelatorUniversal|ID]? 
	 *         target=[ExternallyDependentUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_BinaryMaterialRelation(ISerializationContext context, BinaryMaterialRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Category
	 *     Universal returns Category
	 *     Category returns Category
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Category(ISerializationContext context, Category semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.CATEGORY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.CATEGORY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Characterization returns Characterization
	 *
	 * Constraint:
	 *     (
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         target=[IntrinsicMomentUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_Characterization(ISerializationContext context, Characterization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns CollectiveUniversal
	 *     EndurantUniversal returns CollectiveUniversal
	 *     Universal returns CollectiveUniversal
	 *     SubstantialUniversal returns CollectiveUniversal
	 *     CollectiveUniversal returns CollectiveUniversal
	 *
	 * Constraint:
	 *     (isExtensional?='extensional'? name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_CollectiveUniversal(ISerializationContext context, CollectiveUniversal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompleteGeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (
	 *         isCovering?='complete'? 
	 *         name=ID 
	 *         specializedUniversal=[Universal|ID] 
	 *         specializingUniversals+=[Universal|ID] 
	 *         specializingUniversals+=[Universal|ID]*
	 *     )
	 */
	protected void sequence_CompleteGeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns ComplexDataType
	 *     DataType returns ComplexDataType
	 *     ComplexDataType returns ComplexDataType
	 *
	 * Constraint:
	 *     (name=ID attributes+=DataTypeAttribute attributes+=DataTypeAttribute*)
	 */
	protected void sequence_ComplexDataType(ISerializationContext context, ComplexDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns ComponentOfRelation
	 *     MeronymicRelation returns ComponentOfRelation
	 *     ComponentOfRelation returns ComponentOfRelation
	 *
	 * Constraint:
	 *     (
	 *         (partIsEssential?='essential' | partIsInseparable?='inseparable' | partIsShareable?='shareable' | partIsImmutable?='immutable')+ 
	 *         part=[SubstantialUniversal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         whole=[SubstantialUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_ComponentOfRelation(ISerializationContext context, ComponentOfRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataTypeAttribute returns DataTypeAttribute
	 *
	 * Constraint:
	 *     (isOfType=[DataType|ID] name=ID)
	 */
	protected void sequence_DataTypeAttribute(ISerializationContext context, DataTypeAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.DATA_TYPE_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.DATA_TYPE_ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAttributeAccess().getIsOfTypeDataTypeIDTerminalRuleCall_0_0_1(), semanticObject.eGet(DslPackage.Literals.DATA_TYPE_ATTRIBUTE__IS_OF_TYPE, false));
		feeder.accept(grammarAccess.getDataTypeAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Enumeration
	 *     DataType returns Enumeration
	 *     Enumeration returns Enumeration
	 *
	 * Constraint:
	 *     (name=ID enumerationLiterals+=EString enumerationLiterals+=EString*)
	 */
	protected void sequence_Enumeration(ISerializationContext context, Enumeration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Kind
	 *     EndurantUniversal returns Kind
	 *     Universal returns Kind
	 *     SubstantialUniversal returns Kind
	 *     Kind returns Kind
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_Kind(ISerializationContext context, Kind semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mediation returns Mediation
	 *
	 * Constraint:
	 *     (
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         target=[ExternallyDependentUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_Mediation(ISerializationContext context, Mediation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns MembershipRelation
	 *     MeronymicRelation returns MembershipRelation
	 *     MembershipRelation returns MembershipRelation
	 *
	 * Constraint:
	 *     (
	 *         (partIsEssential?='essential' | partIsInseparable?='inseparable' | partIsShareable?='shareable' | partIsImmutable?='immutable')+ 
	 *         part=[SubstantialUniversal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         whole=[SubstantialUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_MembershipRelation(ISerializationContext context, MembershipRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Mixin
	 *     Universal returns Mixin
	 *     Mixin returns Mixin
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Mixin(ISerializationContext context, Mixin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.MIXIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.MIXIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMixinAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns ModeUniversal
	 *     EndurantUniversal returns ModeUniversal
	 *     Universal returns ModeUniversal
	 *     IntrinsicMomentUniversal returns ModeUniversal
	 *     ModeUniversal returns ModeUniversal
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_ModeUniversal(ISerializationContext context, ModeUniversal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=Element*
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MultipleAnonymousGeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (specializingUniversals+=[Universal|ID] specializingUniversals+=[Universal|ID]+ specializedUniversal=[Universal|ID])
	 */
	protected void sequence_MultipleAnonymousGeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Package
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=ID elements+=Element+)
	 */
	protected void sequence_Package(ISerializationContext context, br.ufes.inf.ontouml.ontoumlprime.dsl.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Phase
	 *     EndurantUniversal returns Phase
	 *     Universal returns Phase
	 *     SubstantialUniversal returns Phase
	 *     Phase returns Phase
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_Phase(ISerializationContext context, Phase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns PrimitiveDataType
	 *     DataType returns PrimitiveDataType
	 *     PrimitiveDataType returns PrimitiveDataType
	 *
	 * Constraint:
	 *     (name=ID _type=PrimitiveDataTypeType)
	 */
	protected void sequence_PrimitiveDataType(ISerializationContext context, PrimitiveDataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PRIMITIVE_DATA_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PRIMITIVE_DATA_TYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PRIMITIVE_DATA_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PRIMITIVE_DATA_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPrimitiveDataTypeAccess().get_typePrimitiveDataTypeTypeParserRuleCall_3_0(), semanticObject.get_type());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns QualityUniversal
	 *     EndurantUniversal returns QualityUniversal
	 *     Universal returns QualityUniversal
	 *     IntrinsicMomentUniversal returns QualityUniversal
	 *     QualityUniversal returns QualityUniversal
	 *
	 * Constraint:
	 *     (name=ID characterization=[Characterization|ID] (datatypes+=[DataType|ID] datatypes+=[DataType|ID]*)? characterizedBy+=Characterization*)
	 */
	protected void sequence_QualityUniversal(ISerializationContext context, QualityUniversal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns QuantityUniversal
	 *     EndurantUniversal returns QuantityUniversal
	 *     Universal returns QuantityUniversal
	 *     SubstantialUniversal returns QuantityUniversal
	 *     QuantityUniversal returns QuantityUniversal
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_QuantityUniversal(ISerializationContext context, QuantityUniversal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns RelatorUniversal
	 *     EndurantUniversal returns RelatorUniversal
	 *     Universal returns RelatorUniversal
	 *     RelatorUniversal returns RelatorUniversal
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization* mediations+=Mediation*)
	 */
	protected void sequence_RelatorUniversal(ISerializationContext context, RelatorUniversal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns RoleMixin
	 *     Universal returns RoleMixin
	 *     ExternallyDependentUniversal returns RoleMixin
	 *     RoleMixin returns RoleMixin
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_RoleMixin(ISerializationContext context, RoleMixin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.ROLE_MIXIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.ROLE_MIXIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleMixinAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Role
	 *     EndurantUniversal returns Role
	 *     Universal returns Role
	 *     ExternallyDependentUniversal returns Role
	 *     SubstantialUniversal returns Role
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleAnonymousGeneralizationSet returns GeneralizationSet
	 *
	 * Constraint:
	 *     (specializingUniversals+=[Universal|ID] specializedUniversal=[Universal|ID])
	 */
	protected void sequence_SingleAnonymousGeneralizationSet(ISerializationContext context, GeneralizationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns SubCollectionRelation
	 *     MeronymicRelation returns SubCollectionRelation
	 *     SubCollectionRelation returns SubCollectionRelation
	 *
	 * Constraint:
	 *     (
	 *         (partIsEssential?='essential' | partIsInseparable?='inseparable' | partIsShareable?='shareable' | partIsImmutable?='immutable')+ 
	 *         part=[SubstantialUniversal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         whole=[SubstantialUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_SubCollectionRelation(ISerializationContext context, SubCollectionRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns SubKind
	 *     EndurantUniversal returns SubKind
	 *     Universal returns SubKind
	 *     SubstantialUniversal returns SubKind
	 *     SubKind returns SubKind
	 *
	 * Constraint:
	 *     (name=ID characterizedBy+=Characterization*)
	 */
	protected void sequence_SubKind(ISerializationContext context, SubKind semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns SubQuantityRelation
	 *     MeronymicRelation returns SubQuantityRelation
	 *     SubQuantityRelation returns SubQuantityRelation
	 *
	 * Constraint:
	 *     (
	 *         (partIsEssential?='essential' | partIsInseparable?='inseparable' | partIsImmutable?='immutable')+ 
	 *         part=[SubstantialUniversal|ID] 
	 *         (sourceLowerBound=CardinalityBound sourceUpperBound=CardinalityUpperBound)? 
	 *         whole=[SubstantialUniversal|ID] 
	 *         (targetLowerBound=CardinalityBound targetUpperBound=CardinalityUpperBound)?
	 *     )
	 */
	protected void sequence_SubQuantityRelation(ISerializationContext context, SubQuantityRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns nAryFormalRelation
	 *     nAryFormalRelation returns nAryFormalRelation
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             targetRelata+=[Universal|ID] 
	 *             sourceLowerBound+=CardinalityBound 
	 *             sourceUpperBound+=CardinalityUpperBound 
	 *             targetRelata+=[Universal|ID]* 
	 *             sourceLowerBound+=CardinalityBound 
	 *             sourceUpperBound+=CardinalityUpperBound
	 *         )?
	 *     )
	 */
	protected void sequence_nAryFormalRelation(ISerializationContext context, nAryFormalRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns nAryMaterialRelation
	 *     nAryMaterialRelation returns nAryMaterialRelation
	 *
	 * Constraint:
	 *     (
	 *         derivedFrom=[RelatorUniversal|ID] 
	 *         name=ID 
	 *         (
	 *             targetRelata+=[ExternallyDependentUniversal|ID] 
	 *             sourceLowerBound+=CardinalityBound 
	 *             sourceUpperBound+=CardinalityUpperBound 
	 *             targetRelata+=[ExternallyDependentUniversal|ID]* 
	 *             sourceLowerBound+=CardinalityBound 
	 *             sourceUpperBound+=CardinalityUpperBound
	 *         )?
	 *     )
	 */
	protected void sequence_nAryMaterialRelation(ISerializationContext context, nAryMaterialRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
