/**
 * generated by Xtext 2.20.0
 */
package br.ufes.inf.ontouml.ontoumlprime.dsl.impl;

import br.ufes.inf.ontouml.ontoumlprime.dsl.Characterization;
import br.ufes.inf.ontouml.ontoumlprime.dsl.CollectiveUniversal;
import br.ufes.inf.ontouml.ontoumlprime.dsl.DslPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Collective Universal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link br.ufes.inf.ontouml.ontoumlprime.dsl.impl.CollectiveUniversalImpl#isIsExtensional <em>Is Extensional</em>}</li>
 *   <li>{@link br.ufes.inf.ontouml.ontoumlprime.dsl.impl.CollectiveUniversalImpl#getName <em>Name</em>}</li>
 *   <li>{@link br.ufes.inf.ontouml.ontoumlprime.dsl.impl.CollectiveUniversalImpl#getCharacterizedBy <em>Characterized By</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CollectiveUniversalImpl extends PackageableElementImpl implements CollectiveUniversal
{
  /**
   * The default value of the '{@link #isIsExtensional() <em>Is Extensional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsExtensional()
   * @generated
   * @ordered
   */
  protected static final boolean IS_EXTENSIONAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIsExtensional() <em>Is Extensional</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIsExtensional()
   * @generated
   * @ordered
   */
  protected boolean isExtensional = IS_EXTENSIONAL_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getCharacterizedBy() <em>Characterized By</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharacterizedBy()
   * @generated
   * @ordered
   */
  protected EList<Characterization> characterizedBy;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CollectiveUniversalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.COLLECTIVE_UNIVERSAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIsExtensional()
  {
    return isExtensional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsExtensional(boolean newIsExtensional)
  {
    boolean oldIsExtensional = isExtensional;
    isExtensional = newIsExtensional;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTIVE_UNIVERSAL__IS_EXTENSIONAL, oldIsExtensional, isExtensional));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTIVE_UNIVERSAL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Characterization> getCharacterizedBy()
  {
    if (characterizedBy == null)
    {
      characterizedBy = new EObjectContainmentEList<Characterization>(Characterization.class, this, DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY);
    }
    return characterizedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY:
        return ((InternalEList<?>)getCharacterizedBy()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTIVE_UNIVERSAL__IS_EXTENSIONAL:
        return isIsExtensional();
      case DslPackage.COLLECTIVE_UNIVERSAL__NAME:
        return getName();
      case DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY:
        return getCharacterizedBy();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTIVE_UNIVERSAL__IS_EXTENSIONAL:
        setIsExtensional((Boolean)newValue);
        return;
      case DslPackage.COLLECTIVE_UNIVERSAL__NAME:
        setName((String)newValue);
        return;
      case DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY:
        getCharacterizedBy().clear();
        getCharacterizedBy().addAll((Collection<? extends Characterization>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTIVE_UNIVERSAL__IS_EXTENSIONAL:
        setIsExtensional(IS_EXTENSIONAL_EDEFAULT);
        return;
      case DslPackage.COLLECTIVE_UNIVERSAL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY:
        getCharacterizedBy().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTIVE_UNIVERSAL__IS_EXTENSIONAL:
        return isExtensional != IS_EXTENSIONAL_EDEFAULT;
      case DslPackage.COLLECTIVE_UNIVERSAL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DslPackage.COLLECTIVE_UNIVERSAL__CHARACTERIZED_BY:
        return characterizedBy != null && !characterizedBy.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (isExtensional: ");
    result.append(isExtensional);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //CollectiveUniversalImpl
